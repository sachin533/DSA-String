import java.util.ArrayList;
import java.util.List;

public class Solution {

    public List<String> letterCombinations(String digits) {
        // If the input digits string is empty, return an empty list
        if (digits.isEmpty()) return new ArrayList<>();

        // Map of digits to their corresponding letters
        String[] phone_map = {
            "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"
        };

        // This will store the final list of letter combinations
        List<String> output = new ArrayList<>();

        // Start backtracking with an empty combination
        backtrack("", digits, phone_map, output);

        return output;
    }

    private void backtrack(String combination, String next_digits, String[] phone_map, List<String> output) {
        // Base case: if there are no more digits to process, add the current combination to the output
        if (next_digits.isEmpty()) {
            output.add(combination);
        } else {
            // Get the letters corresponding to the current digit (first digit in next_digits)
            String letters = phone_map[next_digits.charAt(0) - '2'];
            
            // Explore all possible letters for the current digit
            for (char letter : letters.toCharArray()) {
                // Recursively build the combination
                backtrack(combination + letter, next_digits.substring(1), phone_map, output);
            }
        }
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        String digits = "25";
        List<String> combinations = solution.letterCombinations(digits);
        
        // Print the results
        System.out.println(combinations);
    }
}
