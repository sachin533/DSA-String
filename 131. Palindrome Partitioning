class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ls = new ArrayList<>();
        List<String> curr = new ArrayList<>();
        dfs(ls, curr, s, 0);
        return ls;
    }
    public void dfs(List<List<String>> ls, List<String> curr, String s, int i) {
        if(i == s.length()) {
            ls.add(new ArrayList<>(curr));
            return;
        }
        for(int j = i + 1; j <= s.length(); j++) {
            String sub = s.substring(i, j);
            if(isPalindrome(sub)) {
                curr.add(sub);
                dfs(ls, curr, s, j);
                curr.remove(curr.size() - 1);
            }
        }
    }
    public boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        while(left < right) {
            if(s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
